get_package <- function(package_name,
model_name = "llama3.2:3b-instruct-q4_K_M") {
# Input validation
if (!is.character(package_name) || length(package_name) != 1) {
stop("package_name must be a single character string")
}
if (!is.character(model_name) || length(model_name) != 1) {
stop("model_name must be a single character string")
}
# Attempt to initialize chat with Ollama
chat <- NULL
tryCatch({
chat <- ellmer::chat_ollama(model = model_name)
}, error = function(e) {
stop(paste("Failed to connect to Ollama server. Error:", e$message,
"\nPlease ensure Ollama is running at the default address or specify with base_url."))
})
# Create the prompt
prompt <- paste0(
"Please list the functions that are exported by the R package '",
package_name, "'. Return ONLY function names separated by newlines, with no additional text, explanations, or formatting. ",
"For example, if I asked about 'dplyr', your response should look like:\nfilter\narrange\nselect\n and so on."
)
# Get response from LLM
response <- NULL
# Set a timeout using options
old <- options(timeout = 60)  # Set HTTP timeout to 60 seconds
on.exit(options(old))  # Restore original timeout on exit
tryCatch({
# Use the chat connection with the timeout settings applied
response <- chat$chat(prompt)
}, error = function(e) {
if (grepl("timed out", e$message, ignore.case = TRUE)) {
stop("The request to Ollama timed out. Please check if the server is responding.")
} else {
stop(paste("Error communicating with Ollama:", e$message))
}
})
# Process the response and ensure vector output
if (is.null(response) || nchar(response) == 0) {
warning("Received empty response from LLM, returning empty vector")
return(character(0))
}
# Parse the response and convert it into a proper character vector
tryCatch({
functions <- strsplit(response, "\n")[[1]]  # Split response by newlines
# Clean up the function names
functions <- trimws(functions)
# Remove empty strings
functions <- functions[functions != ""]
# Remove any lines that don't look like function names
functions <- functions[grepl("^[a-zA-Z0-9._]+$", functions)]
if (length(functions) == 0) {
warning("No valid function names found in the response")
return(character(0))
}
return(functions)  # Now properly returns a character vector
}, error = function(e) {
stop(paste("Failed to parse LLM response:", e$message))
})
}
get_package(ggplot2)
get_package("ggplot2")
get_package("readr")
#' List exported functions of an R package using ellmer and Ollama with timeout handling
#'
#' @param pkg_name Character. The name of the R package.
#' @return Character vector of exported function names, even if timeout occurs.
#' @export
#' @import ellmer
#' @importFrom ellmer chat_ollama
list_functions <- function(pkg_name) {
options(ellmer_timeout_s = 300)  # Increased timeout to 5 minutes
chat <- ellmer::chat_ollama(
model = "llama3.2:3b-instruct-q4_K_M",
system_prompt = "You are an R expert. Your task is to list all exported functions from an R package.
Always return the complete and accurate list as it appears in the NAMESPACE file.
Only return the function names as a comma-separated list.
Do NOT provide links, references, explanations, or excuses.
No partial answers. No redirects. No unnecessary context. Only the complete list of functions."
)
prompt <- paste0(
"List the functions exported by the R package '", pkg_name, "'. Only return the function names as a comma-separated list."
)
# Initialize result storage
result_chunks <- character(0)
tryCatch({
stream <- chat$stream(prompt)
# Collect output from the stream
coro::loop(for (chunk in stream) {
result_chunks <- c(result_chunks, chunk)
})
}, error = function(e) {
warning("Timeout or error occurred. Returning partial result.")
})
# Combine all chunks into a single string
full_result <- paste(result_chunks, collapse = "")
full_result <- gsub("\n", "", full_result)         # Remove newlines
full_result <- gsub("\\s*,\\s*", ",", full_result) # Remove spaces around commas
# Parse the result into a vector
function_vector <- strsplit(full_result, ",")[[1]]
cat("Exported functions:\n", paste(function_vector, collapse = ", "), "\n")
return(function_vector)
}
list_functions("readr")
# In the package directory
devtools::document()
devtools::check()
devtools::build()
# In the package directory
devtools::document()
devtools::check()
devtools::build()
# In the package directory
devtools::document()
devtools::check()
devtools::build()
